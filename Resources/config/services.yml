services:
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means
      # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.


  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  Aropixel\PageBundle\Controller\:
    resource: '../../Controller'
    tags: ['controller.service_arguments']

  Aropixel\PageBundle\Form\PageType:
    arguments: ['@security.authorization_checker']
    tags: [form.type]

  Aropixel\PageBundle\Form\BlockType:
      arguments: ['@Aropixel\PageBundle\Block\BlockManager']
      tags: [form.type]

  Aropixel\PageBundle\Form\BlockInputType:
      arguments: ['@Aropixel\PageBundle\Block\BlockManager']
      tags: [form.type]

  Aropixel\PageBundle\Repository\:
    resource: '../../Repository'
    autowire: true
    tags: ['doctrine.repository_service']

  Aropixel\PageBundle\Twig\BlockExtension:
      arguments: ['@Aropixel\PageBundle\Block\BlockManager']
      tags: ['twig.extension']

  Aropixel\PageBundle\Block\BlockManager:
    arguments:
      - '@Aropixel\PageBundle\Repository\BlockRepository'
      - '@parameter_bag'
      - '@Aropixel\PageBundle\ViewModel\ViewBlockConfigAssembler'
      - '@Aropixel\PageBundle\Repository\PageRepository'
      - '@doctrine.orm.entity_manager'

  Aropixel\PageBundle\ViewModel\ViewBlockConfigAssembler:
    arguments: ['@Aropixel\PageBundle\Repository\BlockRepository', '@Aropixel\PageBundle\Repository\PageRepository']
